DROP TABLE IF EXISTS users;
CREATE TABLE users (
    ID_users INT AUTO_INCREMENT NOT NULL,
    Name_users VARCHAR(255),
    EMail VARCHAR(255),
    Password_Utilisateurs VARCHAR(144),
    Creation_Date_users DATETIME,
    Modification_Date_users DATETIME,
    PRIMARY KEY (ID_users)
) ENGINE=InnoDB;

DROP TABLE IF EXISTS beer;
CREATE TABLE beer (
    ID_beer INT AUTO_INCREMENT NOT NULL,
    Name_beer VARCHAR(144),
    Description_Bieres TEXT,
    ABV_Bieres NUMERIC,
    Creation_Date_beer DATETIME,
    Modification_Date_beer DATETIME,
    ID_brewery INT, -- Remplacez par le nom de votre colonne réelle ou une contrainte de clé étrangère
    ID_beer_category INT, -- Remplacez par le nom de votre colonne réelle ou une contrainte de clé étrangère
    PRIMARY KEY (ID_beer)
) ENGINE=InnoDB;

DROP TABLE IF EXISTS ingredient;
CREATE TABLE ingredient (
    ID_ingredient INT AUTO_INCREMENT NOT NULL,
    Type_Avis VARCHAR(255),
    Name_ingredient VARCHAR(144),
    Creation_Date_ingredient DATETIME,
    Modification_Date_ingredient DATETIME,
    PRIMARY KEY (ID_ingredient)
) ENGINE=InnoDB;

DROP TABLE IF EXISTS beer_category;
CREATE TABLE beer_category (
    ID_beer_category INT AUTO_INCREMENT NOT NULL,
    Name_beer_category VARCHAR(144),
    Creation_Date_beer_category DATETIME,
    Modification_Date_beer_category DATETIME,
    PRIMARY KEY (ID_beer_category)
) ENGINE=InnoDB;

DROP TABLE IF EXISTS brewery;
CREATE TABLE brewery (
    ID_brewery INT AUTO_INCREMENT NOT NULL,
    Name_brewery VARCHAR(255),
    Country_brewery VARCHAR(144),
    Creation_Date_brewery DATETIME,
    Modification_Date_brewery DATETIME,
    PRIMARY KEY (ID_brewery)
) ENGINE=InnoDB;

DROP TABLE IF EXISTS photo;
CREATE TABLE photo (
    ID_photo INT AUTO_INCREMENT NOT NULL,
    URL_Photos VARCHAR(500),
    Creation_Date_photo DATETIME,
    Modification_Date_photo DATETIME,
    ID_beer INT, -- Remplacez par le nom de votre colonne réelle ou une contrainte de clé étrangère
    PRIMARY KEY (ID_photo)
) ENGINE=InnoDB;

DROP TABLE IF EXISTS likes;
CREATE TABLE likes (
    ID_users INT AUTO_INCREMENT NOT NULL,
    ID_beer INT NOT NULL,
    PRIMARY KEY (ID_users, ID_beer),
    FOREIGN KEY (ID_users) REFERENCES users (ID_users),
    FOREIGN KEY (ID_beer) REFERENCES beer (ID_beer)
) ENGINE=InnoDB;

DROP TABLE IF EXISTS comment;
CREATE TABLE comment (
    ID_users INT AUTO_INCREMENT NOT NULL,
    ID_beer INT NOT NULL,
    ID_comment INT,
    Comment_comment TEXT,
    note_comment NUMERIC,
    Creation_Date_comment DATETIME,
    Modification_Date_comment DATETIME,
    PRIMARY KEY (ID_users, ID_beer),
    FOREIGN KEY (ID_users) REFERENCES users (ID_users),
    FOREIGN KEY (ID_beer) REFERENCES beer (ID_beer)
) ENGINE=InnoDB;

DROP TABLE IF EXISTS contain;
CREATE TABLE contain (
    ID_beer INT AUTO_INCREMENT NOT NULL,
    ID_ingredient INT NOT NULL,
    PRIMARY KEY (ID_beer, ID_ingredient),
    FOREIGN KEY (ID_beer) REFERENCES beer (ID_beer),
    FOREIGN KEY (ID_ingredient) REFERENCES ingredient (ID_ingredient)
) ENGINE=InnoDB;

ALTER TABLE beer ADD CONSTRAINT FK_beer_ID_brewery FOREIGN KEY (ID_brewery) REFERENCES brewery (ID_brewery);
ALTER TABLE beer ADD CONSTRAINT FK_beer_ID_beer_category FOREIGN KEY (ID_beer_category) REFERENCES beer_category (ID_beer_category);
ALTER TABLE photo ADD CONSTRAINT FK_photo_ID_beer FOREIGN KEY (ID_beer) REFERENCES beer (ID_beer);
ALTER TABLE likes ADD CONSTRAINT FK_like_ID_users FOREIGN KEY (ID_users) REFERENCES users (ID_users);
ALTER TABLE likes ADD CONSTRAINT FK_like_ID_beer FOREIGN KEY (ID_beer) REFERENCES beer (ID_beer);
ALTER TABLE comment ADD CONSTRAINT FK_comment_ID_users FOREIGN KEY (ID_users) REFERENCES users (ID_users);
ALTER TABLE comment ADD CONSTRAINT FK_comment_ID_beer FOREIGN KEY (ID_beer) REFERENCES beer (ID_beer);
ALTER TABLE contain ADD CONSTRAINT FK_contain_ID_beer FOREIGN KEY (ID_beer) REFERENCES beer (ID_beer);
ALTER TABLE contain ADD CONSTRAINT FK_contain_ID_ingredient FOREIGN KEY (ID_ingredient) REFERENCES ingredient (ID_ingredient);
